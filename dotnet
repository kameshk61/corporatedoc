.NET

.NET is a free, cross platform and open source development platform for building different applications like:
Web applications
Mobile applications
Desktop applications
Gaming applications
Machine Learning applications
IoT applications
AI applications

Earlier, we were using the older versions os .NET known as Classic .NET.
Classic .NET apps are tightly coupled with IIS(Internet Information Services).
Now we use the newer version, known as .NET Core in which woven specifications are there to decouple IIS(i.e no dependency on System.dll)

Why .NET?
.NET has the following features:
I. Productive : We can build high quality apps within less time.
II. Reusability : We can change the code and use it easily(Component model).
III. Generics : Generics make the ap productive(LINQ).
IV. Cross-platform : Develop any app on any platform by using only one skill for all kinds of applications.
V. Performance is faster than any other languages because of JIT compilers.


CLR-Commom Language Runtime:
It is a runtime execution environment for .NET.

CLS-Common Language Specification:
As .NET Core is open source, we can introduce our own language and specification usign CLS.

CTS- Common Type System:
It is a standard n .NET which specifies how type definitions and specific value of types are represented in computer memory. Basically, it describe  set of types which we can use for different .NET languages to interact with each other.

FCL-Framework Class Library:
It is a collection of reusable classes, interfaces and value types.

MSIL-Microsoft Intermediate Language:
During the compile time, the .NET compiler converts the source code into MSIL. These are the CUP-independent instructions which can efficiently converted into native code.

JIT-Just in-Time:
It is a kind of compiler. Once the code has been compiled using JIT compilers, these can be immediately executed.

GAC-Global Assembly Cache:
In computer, compiler converts the code into MSIL. The CLR executes the programs, reads it and converts it into native code using JIT compilers. Then OS executes the code. 






-Compilation								Date: 25/10/2018
-Assemblies
-GAC



Compilation:

				Compiler(JIT) and OS
					    |
					    |
			C# ---------->   MSIL ------------->Machine Language
									|
									|
									UI

There are 3 types of JIT Compilers:
1. Ecomo JIT – Doesn't store the code into the memory.
2. Normal JIT- Stores the code into the memory.
3. Pre – JIT – Compiles the entire code and stores in the memory. Use engen.exe  in Command Prompt.




Assembly:
An assembly is a file that is automatically generated by the compiler on successful compilation of every .NET application.

There are two types of assemblies in .NET:
i. EXE :
It is a program.
It's an executable file.
A new process is created when an executable is launched.

ii. DLL :
It stands for Dynamic Link Library.
It's not a program, rather library.
The system loads a DLL into a context of an existing process.


Everything in .NET is done internally using assemblies.
References contain namespaces which can be imported and used in C#.
Everytime we change the code, CLR identifies and recognizes and again generates the new version of a DLL file. This is called versioning.
Assembly comes into picture when we deploy an application as we don't want our data exposed to the user.
DLL handles security and deployment.


Global Assembly Caching(GAC):

During the development of an application, storing of DLLs and using it globally is known as global assembly caching.

We can use gacutil.exe in Command Prompt 









										Date: 29/10/2018
-Memory Management
-OOPs Concepts

.NET supports two types of coding:
1. Managed Code: The resources which are within our application domain is managed code. These codes are faster and run inside CLR which in turn looks after the application by managing memory and handling security.
	
	
2. Unmanaged Code : The code which is developed outside the .NET framework is known as unmanaged code.These code do not run under CLR. Unmanaged code can be unmanaged source code and unmanaged compile code.

.NET has automatic garbage collection. Generally the destructor is called automatically in  .NET but when we use file handling, then we have to explicitally use destructor for memory management. But generally, 

Reference Types:A reference type contains a pointer to the location that holds the data.  These are stored in heap(e.g: String, arrays, Class types, delegates).
Value Types: A data type is a value type if it stores its data in its own memory allocation. These are stored in stack(e.g: int, char, float).

When we create an object of a class, then the object reference at which the value is stored will be stored in the heap and the value will be stored in stack.

Every class has an individual destructor.


		-------------------------------
			C# Code		
		-------------------------------
			   CLR
		(Memory Management)
		-------------------------------
			  MSIL
		-------------------------------





Generations:
For better performance of memory release, the Heap is divided into segments called Generations.
Generation 0
Generation 1
Generation 2

When objects are just created, they are placed to the Generation 0.
When Gen 0 is full (the size of the heap and generations is defined by GC), GC performs a garbage collection. During the collection, GC removes all unreachable objects from the heap. All reachable objects are promoted to the Generation 1.
Gen 0 has faster collection.
When Gen 1 is full, the Gen 1 garbage collection is performed. All objects that survive the collection are promoted to Gen 2. The Gen 0 collection also takes place here.
When Gen 2 is full, GC performs full garbage collection. First, Gen 2 collection is performed, after this, the Gen 1 and Gen 0 collections take place. If there is still not enough memory for new allocations, GC raises the OutOfMemory exception.

			
				----------------------
					Gen 0
				----------------------
					Gen 1
				----------------------
					Gen 2
				----------------------

OOPs Concept:

.NET is an object-oriented programming language which has the following major features:
Inheritance
Abstraction
Encapsulation
Polymorphism

Abstraction means

